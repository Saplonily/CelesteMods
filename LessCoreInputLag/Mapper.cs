using Microsoft.Xna.Framework.Input;

namespace Celeste.Mod.LessCoreInputLag;

public static class Mapper
{
    public static Keys? VKKeysToXNAKeys(ushort vkCode) => vkCode switch
    {
        0x08 => (Keys?)Keys.Back,
        0x09 => (Keys?)Keys.Tab,
        0x0D => (Keys?)Keys.Enter,
        0x13 => (Keys?)Keys.Pause,
        0x14 => (Keys?)Keys.CapsLock,
        0x1B => (Keys?)Keys.Escape,
        0x20 => (Keys?)Keys.Space,
        0x21 => (Keys?)Keys.PageUp,
        0x22 => (Keys?)Keys.PageDown,
        0x23 => (Keys?)Keys.End,
        0x24 => (Keys?)Keys.Home,
        0x25 => (Keys?)Keys.Left,
        0x26 => (Keys?)Keys.Up,
        0x27 => (Keys?)Keys.Right,
        0x28 => (Keys?)Keys.Down,
        0x2D => (Keys?)Keys.Insert,
        0x2E => (Keys?)Keys.Delete,
        0x30 => (Keys?)Keys.D0,
        0x31 => (Keys?)Keys.D1,
        0x32 => (Keys?)Keys.D2,
        0x33 => (Keys?)Keys.D3,
        0x34 => (Keys?)Keys.D4,
        0x35 => (Keys?)Keys.D5,
        0x36 => (Keys?)Keys.D6,
        0x37 => (Keys?)Keys.D7,
        0x38 => (Keys?)Keys.D8,
        0x39 => (Keys?)Keys.D9,
        0x41 => (Keys?)Keys.A,
        0x42 => (Keys?)Keys.B,
        0x43 => (Keys?)Keys.C,
        0x44 => (Keys?)Keys.D,
        0x45 => (Keys?)Keys.E,
        0x46 => (Keys?)Keys.F,
        0x47 => (Keys?)Keys.G,
        0x48 => (Keys?)Keys.H,
        0x49 => (Keys?)Keys.I,
        0x4A => (Keys?)Keys.J,
        0x4B => (Keys?)Keys.K,
        0x4C => (Keys?)Keys.L,
        0x4D => (Keys?)Keys.M,
        0x4E => (Keys?)Keys.N,
        0x4F => (Keys?)Keys.O,
        0x50 => (Keys?)Keys.P,
        0x51 => (Keys?)Keys.Q,
        0x52 => (Keys?)Keys.R,
        0x53 => (Keys?)Keys.S,
        0x54 => (Keys?)Keys.T,
        0x55 => (Keys?)Keys.U,
        0x56 => (Keys?)Keys.V,
        0x57 => (Keys?)Keys.W,
        0x58 => (Keys?)Keys.X,
        0x59 => (Keys?)Keys.Y,
        0x5A => (Keys?)Keys.Z,
        0x5B => (Keys?)Keys.LeftWindows,
        0x5C => (Keys?)Keys.RightWindows,
        0x5D => (Keys?)Keys.Apps,
        0x60 => (Keys?)Keys.NumPad0,
        0x61 => (Keys?)Keys.NumPad1,
        0x62 => (Keys?)Keys.NumPad2,
        0x63 => (Keys?)Keys.NumPad3,
        0x64 => (Keys?)Keys.NumPad4,
        0x65 => (Keys?)Keys.NumPad5,
        0x66 => (Keys?)Keys.NumPad6,
        0x67 => (Keys?)Keys.NumPad7,
        0x68 => (Keys?)Keys.NumPad8,
        0x69 => (Keys?)Keys.NumPad9,
        0x6A => (Keys?)Keys.Multiply,
        0x6B => (Keys?)Keys.Add,
        //case 0x6C: return Keys.NumPadEnter;
        0x6D => (Keys?)Keys.OemMinus,
        0x6E => (Keys?)Keys.OemPeriod,
        0x6F => (Keys?)Keys.OemQuestion,
        0x70 => (Keys?)Keys.F1,
        0x71 => (Keys?)Keys.F2,
        0x72 => (Keys?)Keys.F3,
        0x73 => (Keys?)Keys.F4,
        0x74 => (Keys?)Keys.F5,
        0x75 => (Keys?)Keys.F6,
        0x76 => (Keys?)Keys.F7,
        0x77 => (Keys?)Keys.F8,
        0x78 => (Keys?)Keys.F9,
        0x79 => (Keys?)Keys.F10,
        0x7A => (Keys?)Keys.F11,
        0x7B => (Keys?)Keys.F12,
        0x7C => (Keys?)Keys.F13,
        0x7D => (Keys?)Keys.F14,
        0x7E => (Keys?)Keys.F15,
        0x7F => (Keys?)Keys.F16,
        0x80 => (Keys?)Keys.F17,
        0x81 => (Keys?)Keys.F18,
        0x82 => (Keys?)Keys.F19,
        0x83 => (Keys?)Keys.F20,
        0x84 => (Keys?)Keys.F21,
        0x85 => (Keys?)Keys.F22,
        0x86 => (Keys?)Keys.F23,
        0x87 => (Keys?)Keys.F24,
        0x90 => (Keys?)Keys.NumLock,
        0x91 => (Keys?)Keys.Scroll,
        0xA0 => (Keys?)Keys.LeftShift,
        0xA1 => (Keys?)Keys.RightShift,
        0xA2 => (Keys?)Keys.LeftControl,
        0xA3 => (Keys?)Keys.RightControl,
        0xA4 => (Keys?)Keys.LeftAlt,
        0xA5 => (Keys?)Keys.RightAlt,
        //case 0xBA: return Keys.Colon;  :
        //case 0xBB: return Keys.Equals; =
        0xBC => (Keys?)Keys.OemComma,
        //case 0xBD: return Keys.Minus; -
        //case 0xBE: return Keys.Dot;
        0xBF => (Keys?)Keys.OemQuestion,
        0xC0 => (Keys?)Keys.OemTilde,
        //case 0xDB: return Keys.LeftCurlyBracket; {
        //case 0xDC: return Keys.OemBackslash;
        //case 0xDD: return Keys.RightCurlyBracket; }
        0xDE => (Keys?)Keys.OemQuotes,
        0x0C => (Keys?)Keys.NumPad5,
        0x2C => (Keys?)Keys.PrintScreen,
        _ => null,
    };

    public static Solution SolutionEnumToInstance(SolutionEnum solution) => solution switch
    {
        SolutionEnum.GetKeyboardState => new SolutionGetKeyboardState(),
        SolutionEnum.RawInput => new SolutionRawInput(),
        SolutionEnum.GetAsyncKeyState => new SolutionGetAsyncKeyState(),
        _ => null
    };
}
